<?php

/*
 * Dependencies generated by the foreign keys
 */
require_model('cajas_general.php');

class cajas_general_mov extends fs_model
{
    public $cajamov_id;
    public $caja_id;
    public $codagente;
    public $f_apunte;
    public $apunte;
    public $concepto;
    public $subtotal;
    public $ip;
    
    /**
     * El objeto agente asignado.
     * @var type 
     */
    public $agente;

    /**
     * UN array con todos los agentes utilizados, para agilizar la carga.
     * @var type 
     */
    private static $agentes;    

    public function __construct($data = FALSE) {
        parent::__construct('cajas_general_mov', 'plugins/caja_general/');

        if (!isset(self::$agentes)) {
            self::$agentes = array();
        }
        
        if ($data) {
            $this->cajamov_id = $this->intval($data['cajamov_id']);
            $this->caja_id = $this->intval($data['caja_id']);
            $this->codagente = $data['codagente'];
            $this->f_apunte = Date('d-m-Y H:i:s', strtotime($data['f_apunte']));
            $this->apunte = floatval($data['apunte']);
            $this->concepto = $data['concepto'];
            $this->subtotal = floatval($data['subtotal']);

            $this->ip = NULL;
            if (isset($data['ip'])) {
                $this->ip = $data['ip'];
            }
            
            foreach (self::$agentes as $ag) {
                if ($ag->codagente == $this->codagente) {
                    $this->agente = $ag;
                    break;
                }
            }

            if (!isset($this->agente)) {
                $ag = new agente();
                $this->agente = $ag->get($this->codagente);
                self::$agentes[] = $this->agente;
            }            
        } else {
            $this->cajamov_id = NULL;
            $this->caja_id = NULL;
            $this->codagente = NULL;
            $this->f_apunte = Date('d-m-Y H:i:s');
            $this->apunte = 0;
            $this->concepto = NULL;
            $this->subtotal = 0;
            
            $this->ip = NULL;
            if (isset($_SERVER['REMOTE_ADDR'])) {
                $this->ip = $_SERVER['REMOTE_ADDR'];
            }
            
            $this->agente = NULL;
        }
    }

    /**
     * Esta función es llamada al crear una tabla.
     * Permite insertar valores en la tabla.
     */
    protected function install() {
        return '';
    }

    /**
     * Esta función devuelve TRUE si los datos del objeto se encuentran
     * en la base de datos.
     */
    public function exists() {

        if ($this->cajamov_id) {
            $value = $this->var2str($this->cajamov_id);
            return $this->db->select("SELECT * FROM {$this->table_name} WHERE cajamov_id = $value");
        }

        return false;
    }

    /**
     * Esta función sirve tanto para insertar como para actualizar
     * los datos del objeto en la base de datos.
     */
    public function save() {
        $sql = "";
        if ($this->exists()) {
            $value = $this->var2str($this->cajamov_id);
            if ($this->cajamov_id) {
                $sql = "UPDATE {$this->table_name} SET cajamov_id = " . $this->var2str($this->cajamov_id) . "
                        , caja_id = " . $this->var2str($this->caja_id) . "
                        , codagente = " . $this->var2str($this->codagente) . "
                        , f_apunte = " . $this->var2str($this->f_apunte) . "
                        , apunte = " . $this->var2str($this->apunte) . "
                        , concepto = " . $this->var2str($this->concepto) . "
                        , subtotal = " . $this->var2str($this->subtotal) . "
                        , ip = " . $this->var2str($this->ip) . "
                          WHERE cajamov_id = $value;";
                return $this->db->exec($sql);
            }
        } else {
            $sql = "INSERT INTO {$this->table_name} (
                                    cajamov_id
                                    , caja_id
                                    , codagente
                                    , f_apunte
                                    , apunte
                                    , concepto
                                    , subtotal
                                    , ip
                                    
                                ) VALUES (
                                     " . $this->var2str($this->cajamov_id) . "
                                    ,  " . $this->var2str($this->caja_id) . "
                                    ,  " . $this->var2str($this->codagente) . "
                                    ,  " . $this->var2str($this->f_apunte) . "
                                    ,  " . $this->var2str($this->apunte) . "
                                    ,  " . $this->var2str($this->concepto) . "
                                    ,  " . $this->var2str($this->subtotal) . "
                                    ,  " . $this->var2str($this->ip) . "
                                    
                                );";
            return $this->db->exec($sql);
        }

        return false;
    }

    /**
     * Esta función sirve para eliminar el apunte seleccionado
     */
    public function delete() {

        $value = $this->var2str($this->cajamov_id);
        if ($this->cajamov_id) {
            $sql = "DELETE FROM {$this->table_name} WHERE cajamov_id = $value;";
            return $this->db->exec($sql);
        }
    }
    
    /**
     * Esta función sirve para eliminar los apuntes de la caja enviada a la funcion
     */
    public function delete_all($caja_id = '') {
        if ($caja_id) {
            return $this->db->exec("DELETE FROM {$this->table_name} WHERE caja_id = ".$this->var2str($caja_id).";");
        }
    }    

    public function get($cod) {
        $cod = $this->var2str($cod);
        return $this->parse($this->db->select("SELECT * FROM {$this->table_name} WHERE cajamov_id = $cod"));
    }

    public function get_all_offset($offset = 0, $limit = FS_ITEM_LIMIT) {
        return $this->parse($this->db->select_limit("SELECT * FROM {$this->table_name} ORDER BY f_apunte ASC", $limit, $offset), true);
    }

    public function get_all($caja_id = '') {
        return $this->parse($this->db->select("SELECT * FROM {$this->table_name} WHERE caja_id = ".$this->var2str($caja_id)." ORDER BY f_apunte ASC;"), true);
    }

    public function ingresos($caja_id = '') {
        $plist = array();

        $data = $this->db->select("SELECT * FROM {$this->table_name} WHERE apunte > 0 AND caja_id = ".$this->var2str($caja_id)." ORDER BY f_apunte ASC;");
        if ($data) {
            foreach ($data as $d)
                $plist[] = new cajas_general_mov($d);
        }

        return $plist;
    }

    public function pagos($caja_id = '') {
        $plist = array();

        $data = $this->db->select("SELECT * FROM {$this->table_name} WHERE apunte < 0 AND caja_id = ".$this->var2str($caja_id)." ORDER BY f_apunte ASC;");
        if ($data) {
            foreach ($data as $d)
                $plist[] = new cajas_general_mov($d);
        }

        return $plist;
    }
    
    public function apuntes_contar($caja_id = ''){
      $num = 0;
      
      $apuntes = $this->db->select("SELECT COUNT(cajamov_id) as total FROM ".$this->table_name." WHERE caja_id = ".$this->var2str($caja_id).";");
      if($apuntes)
      {
         $num = intval($apuntes[0]['total']);
      }
      
      return $num;        
    }
    
    public function apuntes_suma($caja_id = ''){
      $num = 0;
      
      $apuntes = $this->db->select("SELECT SUM(apunte) as total FROM ".$this->table_name." WHERE caja_id = ".$this->var2str($caja_id).";");
      if($apuntes)
      {
         $num = floatval($apuntes[0]['total']);
      }
      
      return $num;        
    }
    
    public function parse($items, $array = false) {
        if (count($items) > 1 || $array) {
            $list = array();
            foreach ($items as $item) {
                $list[] = new cajas_general_mov($item);
            }
            return $list;
        } else if (count($items) == 1) {
            return new cajas_general_mov($items[0]);
        }
        return null;
    }

}
